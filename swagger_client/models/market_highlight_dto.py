# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketHighlightDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'headline': 'str',
        'references': 'list[str]',
        'tickers': 'list[str]',
        'user_id': 'str',
        'order': 'int',
        'icon': 'str',
        'created_time': 'int',
        'last_modified': 'int',
        'status': 'MarketHighlightStatus',
        'stock_prices': 'list[LatestPriceDto]'
    }

    attribute_map = {
        'id': 'Id',
        'headline': 'Headline',
        'references': 'References',
        'tickers': 'Tickers',
        'user_id': 'UserId',
        'order': 'Order',
        'icon': 'Icon',
        'created_time': 'CreatedTime',
        'last_modified': 'LastModified',
        'status': 'Status',
        'stock_prices': 'StockPrices'
    }

    def __init__(self, id=None, headline=None, references=None, tickers=None, user_id=None, order=None, icon=None, created_time=None, last_modified=None, status=None, stock_prices=None):  # noqa: E501
        """MarketHighlightDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._headline = None
        self._references = None
        self._tickers = None
        self._user_id = None
        self._order = None
        self._icon = None
        self._created_time = None
        self._last_modified = None
        self._status = None
        self._stock_prices = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if headline is not None:
            self.headline = headline
        if references is not None:
            self.references = references
        if tickers is not None:
            self.tickers = tickers
        if user_id is not None:
            self.user_id = user_id
        if order is not None:
            self.order = order
        if icon is not None:
            self.icon = icon
        if created_time is not None:
            self.created_time = created_time
        if last_modified is not None:
            self.last_modified = last_modified
        if status is not None:
            self.status = status
        if stock_prices is not None:
            self.stock_prices = stock_prices

    @property
    def id(self):
        """Gets the id of this MarketHighlightDto.  # noqa: E501


        :return: The id of this MarketHighlightDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MarketHighlightDto.


        :param id: The id of this MarketHighlightDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def headline(self):
        """Gets the headline of this MarketHighlightDto.  # noqa: E501


        :return: The headline of this MarketHighlightDto.  # noqa: E501
        :rtype: str
        """
        return self._headline

    @headline.setter
    def headline(self, headline):
        """Sets the headline of this MarketHighlightDto.


        :param headline: The headline of this MarketHighlightDto.  # noqa: E501
        :type: str
        """

        self._headline = headline

    @property
    def references(self):
        """Gets the references of this MarketHighlightDto.  # noqa: E501


        :return: The references of this MarketHighlightDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this MarketHighlightDto.


        :param references: The references of this MarketHighlightDto.  # noqa: E501
        :type: list[str]
        """

        self._references = references

    @property
    def tickers(self):
        """Gets the tickers of this MarketHighlightDto.  # noqa: E501


        :return: The tickers of this MarketHighlightDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tickers

    @tickers.setter
    def tickers(self, tickers):
        """Sets the tickers of this MarketHighlightDto.


        :param tickers: The tickers of this MarketHighlightDto.  # noqa: E501
        :type: list[str]
        """

        self._tickers = tickers

    @property
    def user_id(self):
        """Gets the user_id of this MarketHighlightDto.  # noqa: E501


        :return: The user_id of this MarketHighlightDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MarketHighlightDto.


        :param user_id: The user_id of this MarketHighlightDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def order(self):
        """Gets the order of this MarketHighlightDto.  # noqa: E501


        :return: The order of this MarketHighlightDto.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this MarketHighlightDto.


        :param order: The order of this MarketHighlightDto.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def icon(self):
        """Gets the icon of this MarketHighlightDto.  # noqa: E501


        :return: The icon of this MarketHighlightDto.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this MarketHighlightDto.


        :param icon: The icon of this MarketHighlightDto.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def created_time(self):
        """Gets the created_time of this MarketHighlightDto.  # noqa: E501


        :return: The created_time of this MarketHighlightDto.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this MarketHighlightDto.


        :param created_time: The created_time of this MarketHighlightDto.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def last_modified(self):
        """Gets the last_modified of this MarketHighlightDto.  # noqa: E501


        :return: The last_modified of this MarketHighlightDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this MarketHighlightDto.


        :param last_modified: The last_modified of this MarketHighlightDto.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def status(self):
        """Gets the status of this MarketHighlightDto.  # noqa: E501


        :return: The status of this MarketHighlightDto.  # noqa: E501
        :rtype: MarketHighlightStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketHighlightDto.


        :param status: The status of this MarketHighlightDto.  # noqa: E501
        :type: MarketHighlightStatus
        """

        self._status = status

    @property
    def stock_prices(self):
        """Gets the stock_prices of this MarketHighlightDto.  # noqa: E501


        :return: The stock_prices of this MarketHighlightDto.  # noqa: E501
        :rtype: list[LatestPriceDto]
        """
        return self._stock_prices

    @stock_prices.setter
    def stock_prices(self, stock_prices):
        """Sets the stock_prices of this MarketHighlightDto.


        :param stock_prices: The stock_prices of this MarketHighlightDto.  # noqa: E501
        :type: list[LatestPriceDto]
        """

        self._stock_prices = stock_prices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketHighlightDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketHighlightDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
