# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlotDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'plot_data': 'str',
        'created_time': 'int',
        'is_public': 'bool',
        'i8_command': 'str',
        'title': 'str',
        'user_notes': 'str',
        'plot_type': 'str',
        'tickers': 'list[str]',
        'tags': 'list[str]',
        'view_count': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'user_id': 'UserId',
        'plot_data': 'PlotData',
        'created_time': 'CreatedTime',
        'is_public': 'IsPublic',
        'i8_command': 'I8Command',
        'title': 'Title',
        'user_notes': 'UserNotes',
        'plot_type': 'PlotType',
        'tickers': 'Tickers',
        'tags': 'Tags',
        'view_count': 'ViewCount'
    }

    def __init__(self, id=None, user_id=None, plot_data=None, created_time=None, is_public=None, i8_command=None, title=None, user_notes=None, plot_type=None, tickers=None, tags=None, view_count=None):  # noqa: E501
        """PlotDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._plot_data = None
        self._created_time = None
        self._is_public = None
        self._i8_command = None
        self._title = None
        self._user_notes = None
        self._plot_type = None
        self._tickers = None
        self._tags = None
        self._view_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if plot_data is not None:
            self.plot_data = plot_data
        if created_time is not None:
            self.created_time = created_time
        if is_public is not None:
            self.is_public = is_public
        if i8_command is not None:
            self.i8_command = i8_command
        if title is not None:
            self.title = title
        if user_notes is not None:
            self.user_notes = user_notes
        if plot_type is not None:
            self.plot_type = plot_type
        if tickers is not None:
            self.tickers = tickers
        if tags is not None:
            self.tags = tags
        if view_count is not None:
            self.view_count = view_count

    @property
    def id(self):
        """Gets the id of this PlotDto.  # noqa: E501


        :return: The id of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlotDto.


        :param id: The id of this PlotDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this PlotDto.  # noqa: E501


        :return: The user_id of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlotDto.


        :param user_id: The user_id of this PlotDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def plot_data(self):
        """Gets the plot_data of this PlotDto.  # noqa: E501


        :return: The plot_data of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._plot_data

    @plot_data.setter
    def plot_data(self, plot_data):
        """Sets the plot_data of this PlotDto.


        :param plot_data: The plot_data of this PlotDto.  # noqa: E501
        :type: str
        """

        self._plot_data = plot_data

    @property
    def created_time(self):
        """Gets the created_time of this PlotDto.  # noqa: E501


        :return: The created_time of this PlotDto.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PlotDto.


        :param created_time: The created_time of this PlotDto.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def is_public(self):
        """Gets the is_public of this PlotDto.  # noqa: E501


        :return: The is_public of this PlotDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this PlotDto.


        :param is_public: The is_public of this PlotDto.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def i8_command(self):
        """Gets the i8_command of this PlotDto.  # noqa: E501


        :return: The i8_command of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._i8_command

    @i8_command.setter
    def i8_command(self, i8_command):
        """Sets the i8_command of this PlotDto.


        :param i8_command: The i8_command of this PlotDto.  # noqa: E501
        :type: str
        """

        self._i8_command = i8_command

    @property
    def title(self):
        """Gets the title of this PlotDto.  # noqa: E501


        :return: The title of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlotDto.


        :param title: The title of this PlotDto.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def user_notes(self):
        """Gets the user_notes of this PlotDto.  # noqa: E501


        :return: The user_notes of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._user_notes

    @user_notes.setter
    def user_notes(self, user_notes):
        """Sets the user_notes of this PlotDto.


        :param user_notes: The user_notes of this PlotDto.  # noqa: E501
        :type: str
        """

        self._user_notes = user_notes

    @property
    def plot_type(self):
        """Gets the plot_type of this PlotDto.  # noqa: E501


        :return: The plot_type of this PlotDto.  # noqa: E501
        :rtype: str
        """
        return self._plot_type

    @plot_type.setter
    def plot_type(self, plot_type):
        """Sets the plot_type of this PlotDto.


        :param plot_type: The plot_type of this PlotDto.  # noqa: E501
        :type: str
        """

        self._plot_type = plot_type

    @property
    def tickers(self):
        """Gets the tickers of this PlotDto.  # noqa: E501


        :return: The tickers of this PlotDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tickers

    @tickers.setter
    def tickers(self, tickers):
        """Sets the tickers of this PlotDto.


        :param tickers: The tickers of this PlotDto.  # noqa: E501
        :type: list[str]
        """

        self._tickers = tickers

    @property
    def tags(self):
        """Gets the tags of this PlotDto.  # noqa: E501


        :return: The tags of this PlotDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PlotDto.


        :param tags: The tags of this PlotDto.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def view_count(self):
        """Gets the view_count of this PlotDto.  # noqa: E501


        :return: The view_count of this PlotDto.  # noqa: E501
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this PlotDto.


        :param view_count: The view_count of this PlotDto.  # noqa: E501
        :type: int
        """

        self._view_count = view_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlotDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
