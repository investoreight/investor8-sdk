# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockFinancialMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prev': 'StockFinancial',
        'yo_y': 'StockFinancial',
        'ttm_growth': 'StockFinancial',
        'ttm': 'StockFinancial'
    }

    attribute_map = {
        'prev': 'Prev',
        'yo_y': 'YoY',
        'ttm_growth': 'TtmGrowth',
        'ttm': 'TTM'
    }

    def __init__(self, prev=None, yo_y=None, ttm_growth=None, ttm=None):  # noqa: E501
        """StockFinancialMetrics - a model defined in Swagger"""  # noqa: E501
        self._prev = None
        self._yo_y = None
        self._ttm_growth = None
        self._ttm = None
        self.discriminator = None
        if prev is not None:
            self.prev = prev
        if yo_y is not None:
            self.yo_y = yo_y
        if ttm_growth is not None:
            self.ttm_growth = ttm_growth
        if ttm is not None:
            self.ttm = ttm

    @property
    def prev(self):
        """Gets the prev of this StockFinancialMetrics.  # noqa: E501


        :return: The prev of this StockFinancialMetrics.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this StockFinancialMetrics.


        :param prev: The prev of this StockFinancialMetrics.  # noqa: E501
        :type: StockFinancial
        """

        self._prev = prev

    @property
    def yo_y(self):
        """Gets the yo_y of this StockFinancialMetrics.  # noqa: E501


        :return: The yo_y of this StockFinancialMetrics.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._yo_y

    @yo_y.setter
    def yo_y(self, yo_y):
        """Sets the yo_y of this StockFinancialMetrics.


        :param yo_y: The yo_y of this StockFinancialMetrics.  # noqa: E501
        :type: StockFinancial
        """

        self._yo_y = yo_y

    @property
    def ttm_growth(self):
        """Gets the ttm_growth of this StockFinancialMetrics.  # noqa: E501


        :return: The ttm_growth of this StockFinancialMetrics.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._ttm_growth

    @ttm_growth.setter
    def ttm_growth(self, ttm_growth):
        """Sets the ttm_growth of this StockFinancialMetrics.


        :param ttm_growth: The ttm_growth of this StockFinancialMetrics.  # noqa: E501
        :type: StockFinancial
        """

        self._ttm_growth = ttm_growth

    @property
    def ttm(self):
        """Gets the ttm of this StockFinancialMetrics.  # noqa: E501


        :return: The ttm of this StockFinancialMetrics.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._ttm

    @ttm.setter
    def ttm(self, ttm):
        """Sets the ttm of this StockFinancialMetrics.


        :param ttm: The ttm of this StockFinancialMetrics.  # noqa: E501
        :type: StockFinancial
        """

        self._ttm = ttm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockFinancialMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockFinancialMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
