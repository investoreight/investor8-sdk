# coding: utf-8

"""
    Investoreight Core API

    Investoreight API Documentation:  https://api.investoreight.com/api-docs/index.html  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@investoreight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScreeningConditionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'str',
        'display': 'str',
        'es_query': 'str'
    }

    attribute_map = {
        'condition': 'Condition',
        'display': 'Display',
        'es_query': 'ESQuery'
    }

    def __init__(self, condition=None, display=None, es_query=None):  # noqa: E501
        """ScreeningConditionDto - a model defined in Swagger"""  # noqa: E501
        self._condition = None
        self._display = None
        self._es_query = None
        self.discriminator = None
        if condition is not None:
            self.condition = condition
        if display is not None:
            self.display = display
        if es_query is not None:
            self.es_query = es_query

    @property
    def condition(self):
        """Gets the condition of this ScreeningConditionDto.  # noqa: E501


        :return: The condition of this ScreeningConditionDto.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ScreeningConditionDto.


        :param condition: The condition of this ScreeningConditionDto.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def display(self):
        """Gets the display of this ScreeningConditionDto.  # noqa: E501


        :return: The display of this ScreeningConditionDto.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ScreeningConditionDto.


        :param display: The display of this ScreeningConditionDto.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def es_query(self):
        """Gets the es_query of this ScreeningConditionDto.  # noqa: E501


        :return: The es_query of this ScreeningConditionDto.  # noqa: E501
        :rtype: str
        """
        return self._es_query

    @es_query.setter
    def es_query(self, es_query):
        """Sets the es_query of this ScreeningConditionDto.


        :param es_query: The es_query of this ScreeningConditionDto.  # noqa: E501
        :type: str
        """

        self._es_query = es_query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScreeningConditionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScreeningConditionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
