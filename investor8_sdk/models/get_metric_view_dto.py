# coding: utf-8

"""
    Investoreight Core API

    Investoreight API Documentation:  https://api.investoreight.com/api-docs/index.html  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@investoreight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetMetricViewDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'view_name': 'str',
        'display_name': 'str',
        'user_id': 'str',
        'type': 'str',
        'metric_groups': 'list[MetricGroupDto]',
        'last_modified': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'view_name': 'ViewName',
        'display_name': 'DisplayName',
        'user_id': 'UserId',
        'type': 'Type',
        'metric_groups': 'MetricGroups',
        'last_modified': 'LastModified'
    }

    def __init__(self, id=None, view_name=None, display_name=None, user_id=None, type=None, metric_groups=None, last_modified=None):  # noqa: E501
        """GetMetricViewDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._view_name = None
        self._display_name = None
        self._user_id = None
        self._type = None
        self._metric_groups = None
        self._last_modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if view_name is not None:
            self.view_name = view_name
        if display_name is not None:
            self.display_name = display_name
        if user_id is not None:
            self.user_id = user_id
        if type is not None:
            self.type = type
        if metric_groups is not None:
            self.metric_groups = metric_groups
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def id(self):
        """Gets the id of this GetMetricViewDto.  # noqa: E501


        :return: The id of this GetMetricViewDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMetricViewDto.


        :param id: The id of this GetMetricViewDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def view_name(self):
        """Gets the view_name of this GetMetricViewDto.  # noqa: E501


        :return: The view_name of this GetMetricViewDto.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this GetMetricViewDto.


        :param view_name: The view_name of this GetMetricViewDto.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def display_name(self):
        """Gets the display_name of this GetMetricViewDto.  # noqa: E501


        :return: The display_name of this GetMetricViewDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetMetricViewDto.


        :param display_name: The display_name of this GetMetricViewDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def user_id(self):
        """Gets the user_id of this GetMetricViewDto.  # noqa: E501


        :return: The user_id of this GetMetricViewDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetMetricViewDto.


        :param user_id: The user_id of this GetMetricViewDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def type(self):
        """Gets the type of this GetMetricViewDto.  # noqa: E501


        :return: The type of this GetMetricViewDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetMetricViewDto.


        :param type: The type of this GetMetricViewDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def metric_groups(self):
        """Gets the metric_groups of this GetMetricViewDto.  # noqa: E501


        :return: The metric_groups of this GetMetricViewDto.  # noqa: E501
        :rtype: list[MetricGroupDto]
        """
        return self._metric_groups

    @metric_groups.setter
    def metric_groups(self, metric_groups):
        """Sets the metric_groups of this GetMetricViewDto.


        :param metric_groups: The metric_groups of this GetMetricViewDto.  # noqa: E501
        :type: list[MetricGroupDto]
        """

        self._metric_groups = metric_groups

    @property
    def last_modified(self):
        """Gets the last_modified of this GetMetricViewDto.  # noqa: E501


        :return: The last_modified of this GetMetricViewDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this GetMetricViewDto.


        :param last_modified: The last_modified of this GetMetricViewDto.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMetricViewDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMetricViewDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
