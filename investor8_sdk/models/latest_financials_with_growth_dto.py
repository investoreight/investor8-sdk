# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LatestFinancialsWithGrowthDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quarterly': 'StockFinancial',
        'ttm': 'StockFinancial',
        'growth': 'FinancialsGrowth'
    }

    attribute_map = {
        'quarterly': 'Quarterly',
        'ttm': 'Ttm',
        'growth': 'Growth'
    }

    def __init__(self, quarterly=None, ttm=None, growth=None):  # noqa: E501
        """LatestFinancialsWithGrowthDto - a model defined in Swagger"""  # noqa: E501
        self._quarterly = None
        self._ttm = None
        self._growth = None
        self.discriminator = None
        if quarterly is not None:
            self.quarterly = quarterly
        if ttm is not None:
            self.ttm = ttm
        if growth is not None:
            self.growth = growth

    @property
    def quarterly(self):
        """Gets the quarterly of this LatestFinancialsWithGrowthDto.  # noqa: E501


        :return: The quarterly of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._quarterly

    @quarterly.setter
    def quarterly(self, quarterly):
        """Sets the quarterly of this LatestFinancialsWithGrowthDto.


        :param quarterly: The quarterly of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :type: StockFinancial
        """

        self._quarterly = quarterly

    @property
    def ttm(self):
        """Gets the ttm of this LatestFinancialsWithGrowthDto.  # noqa: E501


        :return: The ttm of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :rtype: StockFinancial
        """
        return self._ttm

    @ttm.setter
    def ttm(self, ttm):
        """Sets the ttm of this LatestFinancialsWithGrowthDto.


        :param ttm: The ttm of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :type: StockFinancial
        """

        self._ttm = ttm

    @property
    def growth(self):
        """Gets the growth of this LatestFinancialsWithGrowthDto.  # noqa: E501


        :return: The growth of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :rtype: FinancialsGrowth
        """
        return self._growth

    @growth.setter
    def growth(self, growth):
        """Sets the growth of this LatestFinancialsWithGrowthDto.


        :param growth: The growth of this LatestFinancialsWithGrowthDto.  # noqa: E501
        :type: FinancialsGrowth
        """

        self._growth = growth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LatestFinancialsWithGrowthDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LatestFinancialsWithGrowthDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
