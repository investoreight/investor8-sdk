# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StockIpo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ticker': 'str',
        'status': 'str',
        'timestamp': 'int',
        'exchange': 'str',
        'open': 'float',
        'close': 'float',
        'volume': 'float',
        'day_change': 'float',
        'week_change': 'float',
        'month_change': 'float',
        'offer_amount': 'float',
        'share_count': 'float',
        'share_count_highest': 'float',
        'share_count_lowest': 'float',
        'share_price': 'float',
        'share_price_highest': 'float',
        'share_price_lowest': 'float',
        'announcement_url': 'str',
        'sec_report_url': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'ticker': 'Ticker',
        'status': 'Status',
        'timestamp': 'Timestamp',
        'exchange': 'Exchange',
        'open': 'Open',
        'close': 'Close',
        'volume': 'Volume',
        'day_change': 'DayChange',
        'week_change': 'WeekChange',
        'month_change': 'MonthChange',
        'offer_amount': 'OfferAmount',
        'share_count': 'ShareCount',
        'share_count_highest': 'ShareCountHighest',
        'share_count_lowest': 'ShareCountLowest',
        'share_price': 'SharePrice',
        'share_price_highest': 'SharePriceHighest',
        'share_price_lowest': 'SharePriceLowest',
        'announcement_url': 'AnnouncementUrl',
        'sec_report_url': 'SecReportUrl'
    }

    def __init__(self, id=None, ticker=None, status=None, timestamp=None, exchange=None, open=None, close=None, volume=None, day_change=None, week_change=None, month_change=None, offer_amount=None, share_count=None, share_count_highest=None, share_count_lowest=None, share_price=None, share_price_highest=None, share_price_lowest=None, announcement_url=None, sec_report_url=None):  # noqa: E501
        """StockIpo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ticker = None
        self._status = None
        self._timestamp = None
        self._exchange = None
        self._open = None
        self._close = None
        self._volume = None
        self._day_change = None
        self._week_change = None
        self._month_change = None
        self._offer_amount = None
        self._share_count = None
        self._share_count_highest = None
        self._share_count_lowest = None
        self._share_price = None
        self._share_price_highest = None
        self._share_price_lowest = None
        self._announcement_url = None
        self._sec_report_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if ticker is not None:
            self.ticker = ticker
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp
        if exchange is not None:
            self.exchange = exchange
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close
        if volume is not None:
            self.volume = volume
        if day_change is not None:
            self.day_change = day_change
        if week_change is not None:
            self.week_change = week_change
        if month_change is not None:
            self.month_change = month_change
        if offer_amount is not None:
            self.offer_amount = offer_amount
        if share_count is not None:
            self.share_count = share_count
        if share_count_highest is not None:
            self.share_count_highest = share_count_highest
        if share_count_lowest is not None:
            self.share_count_lowest = share_count_lowest
        if share_price is not None:
            self.share_price = share_price
        if share_price_highest is not None:
            self.share_price_highest = share_price_highest
        if share_price_lowest is not None:
            self.share_price_lowest = share_price_lowest
        if announcement_url is not None:
            self.announcement_url = announcement_url
        if sec_report_url is not None:
            self.sec_report_url = sec_report_url

    @property
    def id(self):
        """Gets the id of this StockIpo.  # noqa: E501


        :return: The id of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StockIpo.


        :param id: The id of this StockIpo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ticker(self):
        """Gets the ticker of this StockIpo.  # noqa: E501


        :return: The ticker of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this StockIpo.


        :param ticker: The ticker of this StockIpo.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def status(self):
        """Gets the status of this StockIpo.  # noqa: E501


        :return: The status of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StockIpo.


        :param status: The status of this StockIpo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this StockIpo.  # noqa: E501


        :return: The timestamp of this StockIpo.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StockIpo.


        :param timestamp: The timestamp of this StockIpo.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def exchange(self):
        """Gets the exchange of this StockIpo.  # noqa: E501


        :return: The exchange of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this StockIpo.


        :param exchange: The exchange of this StockIpo.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def open(self):
        """Gets the open of this StockIpo.  # noqa: E501


        :return: The open of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this StockIpo.


        :param open: The open of this StockIpo.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this StockIpo.  # noqa: E501


        :return: The close of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this StockIpo.


        :param close: The close of this StockIpo.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def volume(self):
        """Gets the volume of this StockIpo.  # noqa: E501


        :return: The volume of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this StockIpo.


        :param volume: The volume of this StockIpo.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def day_change(self):
        """Gets the day_change of this StockIpo.  # noqa: E501


        :return: The day_change of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._day_change

    @day_change.setter
    def day_change(self, day_change):
        """Sets the day_change of this StockIpo.


        :param day_change: The day_change of this StockIpo.  # noqa: E501
        :type: float
        """

        self._day_change = day_change

    @property
    def week_change(self):
        """Gets the week_change of this StockIpo.  # noqa: E501


        :return: The week_change of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._week_change

    @week_change.setter
    def week_change(self, week_change):
        """Sets the week_change of this StockIpo.


        :param week_change: The week_change of this StockIpo.  # noqa: E501
        :type: float
        """

        self._week_change = week_change

    @property
    def month_change(self):
        """Gets the month_change of this StockIpo.  # noqa: E501


        :return: The month_change of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._month_change

    @month_change.setter
    def month_change(self, month_change):
        """Sets the month_change of this StockIpo.


        :param month_change: The month_change of this StockIpo.  # noqa: E501
        :type: float
        """

        self._month_change = month_change

    @property
    def offer_amount(self):
        """Gets the offer_amount of this StockIpo.  # noqa: E501


        :return: The offer_amount of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._offer_amount

    @offer_amount.setter
    def offer_amount(self, offer_amount):
        """Sets the offer_amount of this StockIpo.


        :param offer_amount: The offer_amount of this StockIpo.  # noqa: E501
        :type: float
        """

        self._offer_amount = offer_amount

    @property
    def share_count(self):
        """Gets the share_count of this StockIpo.  # noqa: E501


        :return: The share_count of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_count

    @share_count.setter
    def share_count(self, share_count):
        """Sets the share_count of this StockIpo.


        :param share_count: The share_count of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_count = share_count

    @property
    def share_count_highest(self):
        """Gets the share_count_highest of this StockIpo.  # noqa: E501


        :return: The share_count_highest of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_count_highest

    @share_count_highest.setter
    def share_count_highest(self, share_count_highest):
        """Sets the share_count_highest of this StockIpo.


        :param share_count_highest: The share_count_highest of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_count_highest = share_count_highest

    @property
    def share_count_lowest(self):
        """Gets the share_count_lowest of this StockIpo.  # noqa: E501


        :return: The share_count_lowest of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_count_lowest

    @share_count_lowest.setter
    def share_count_lowest(self, share_count_lowest):
        """Sets the share_count_lowest of this StockIpo.


        :param share_count_lowest: The share_count_lowest of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_count_lowest = share_count_lowest

    @property
    def share_price(self):
        """Gets the share_price of this StockIpo.  # noqa: E501


        :return: The share_price of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_price

    @share_price.setter
    def share_price(self, share_price):
        """Sets the share_price of this StockIpo.


        :param share_price: The share_price of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_price = share_price

    @property
    def share_price_highest(self):
        """Gets the share_price_highest of this StockIpo.  # noqa: E501


        :return: The share_price_highest of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_price_highest

    @share_price_highest.setter
    def share_price_highest(self, share_price_highest):
        """Sets the share_price_highest of this StockIpo.


        :param share_price_highest: The share_price_highest of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_price_highest = share_price_highest

    @property
    def share_price_lowest(self):
        """Gets the share_price_lowest of this StockIpo.  # noqa: E501


        :return: The share_price_lowest of this StockIpo.  # noqa: E501
        :rtype: float
        """
        return self._share_price_lowest

    @share_price_lowest.setter
    def share_price_lowest(self, share_price_lowest):
        """Sets the share_price_lowest of this StockIpo.


        :param share_price_lowest: The share_price_lowest of this StockIpo.  # noqa: E501
        :type: float
        """

        self._share_price_lowest = share_price_lowest

    @property
    def announcement_url(self):
        """Gets the announcement_url of this StockIpo.  # noqa: E501


        :return: The announcement_url of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._announcement_url

    @announcement_url.setter
    def announcement_url(self, announcement_url):
        """Sets the announcement_url of this StockIpo.


        :param announcement_url: The announcement_url of this StockIpo.  # noqa: E501
        :type: str
        """

        self._announcement_url = announcement_url

    @property
    def sec_report_url(self):
        """Gets the sec_report_url of this StockIpo.  # noqa: E501


        :return: The sec_report_url of this StockIpo.  # noqa: E501
        :rtype: str
        """
        return self._sec_report_url

    @sec_report_url.setter
    def sec_report_url(self, sec_report_url):
        """Sets the sec_report_url of this StockIpo.


        :param sec_report_url: The sec_report_url of this StockIpo.  # noqa: E501
        :type: str
        """

        self._sec_report_url = sec_report_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StockIpo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StockIpo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
