# coding: utf-8

"""
    Investor8.Core

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradingCalendarDetailsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market_open_time_utc': 'str',
        'market_close_time_utc': 'str',
        'latest_open_date': 'str',
        'next_open_date': 'str',
        'is_market_open': 'bool'
    }

    attribute_map = {
        'market_open_time_utc': 'MarketOpenTimeUtc',
        'market_close_time_utc': 'MarketCloseTimeUtc',
        'latest_open_date': 'LatestOpenDate',
        'next_open_date': 'NextOpenDate',
        'is_market_open': 'IsMarketOpen'
    }

    def __init__(self, market_open_time_utc=None, market_close_time_utc=None, latest_open_date=None, next_open_date=None, is_market_open=None):  # noqa: E501
        """TradingCalendarDetailsDto - a model defined in Swagger"""  # noqa: E501
        self._market_open_time_utc = None
        self._market_close_time_utc = None
        self._latest_open_date = None
        self._next_open_date = None
        self._is_market_open = None
        self.discriminator = None
        if market_open_time_utc is not None:
            self.market_open_time_utc = market_open_time_utc
        if market_close_time_utc is not None:
            self.market_close_time_utc = market_close_time_utc
        if latest_open_date is not None:
            self.latest_open_date = latest_open_date
        if next_open_date is not None:
            self.next_open_date = next_open_date
        if is_market_open is not None:
            self.is_market_open = is_market_open

    @property
    def market_open_time_utc(self):
        """Gets the market_open_time_utc of this TradingCalendarDetailsDto.  # noqa: E501


        :return: The market_open_time_utc of this TradingCalendarDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._market_open_time_utc

    @market_open_time_utc.setter
    def market_open_time_utc(self, market_open_time_utc):
        """Sets the market_open_time_utc of this TradingCalendarDetailsDto.


        :param market_open_time_utc: The market_open_time_utc of this TradingCalendarDetailsDto.  # noqa: E501
        :type: str
        """

        self._market_open_time_utc = market_open_time_utc

    @property
    def market_close_time_utc(self):
        """Gets the market_close_time_utc of this TradingCalendarDetailsDto.  # noqa: E501


        :return: The market_close_time_utc of this TradingCalendarDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._market_close_time_utc

    @market_close_time_utc.setter
    def market_close_time_utc(self, market_close_time_utc):
        """Sets the market_close_time_utc of this TradingCalendarDetailsDto.


        :param market_close_time_utc: The market_close_time_utc of this TradingCalendarDetailsDto.  # noqa: E501
        :type: str
        """

        self._market_close_time_utc = market_close_time_utc

    @property
    def latest_open_date(self):
        """Gets the latest_open_date of this TradingCalendarDetailsDto.  # noqa: E501


        :return: The latest_open_date of this TradingCalendarDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._latest_open_date

    @latest_open_date.setter
    def latest_open_date(self, latest_open_date):
        """Sets the latest_open_date of this TradingCalendarDetailsDto.


        :param latest_open_date: The latest_open_date of this TradingCalendarDetailsDto.  # noqa: E501
        :type: str
        """

        self._latest_open_date = latest_open_date

    @property
    def next_open_date(self):
        """Gets the next_open_date of this TradingCalendarDetailsDto.  # noqa: E501


        :return: The next_open_date of this TradingCalendarDetailsDto.  # noqa: E501
        :rtype: str
        """
        return self._next_open_date

    @next_open_date.setter
    def next_open_date(self, next_open_date):
        """Sets the next_open_date of this TradingCalendarDetailsDto.


        :param next_open_date: The next_open_date of this TradingCalendarDetailsDto.  # noqa: E501
        :type: str
        """

        self._next_open_date = next_open_date

    @property
    def is_market_open(self):
        """Gets the is_market_open of this TradingCalendarDetailsDto.  # noqa: E501


        :return: The is_market_open of this TradingCalendarDetailsDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_market_open

    @is_market_open.setter
    def is_market_open(self, is_market_open):
        """Sets the is_market_open of this TradingCalendarDetailsDto.


        :param is_market_open: The is_market_open of this TradingCalendarDetailsDto.  # noqa: E501
        :type: bool
        """

        self._is_market_open = is_market_open

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradingCalendarDetailsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradingCalendarDetailsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
