# coding: utf-8

"""
    Investoreight Core API

    Investoreight API Documentation:  https://api.investoreight.com/api-docs/index.html  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@investoreight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetScreeningProfileDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'profile_name': 'str',
        'display_name': 'str',
        'conditions': 'str',
        'user_id': 'str',
        'type': 'str',
        'sort_metric': 'str',
        'sort_order': 'str',
        'last_modified': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'profile_name': 'ProfileName',
        'display_name': 'DisplayName',
        'conditions': 'Conditions',
        'user_id': 'UserId',
        'type': 'Type',
        'sort_metric': 'SortMetric',
        'sort_order': 'SortOrder',
        'last_modified': 'LastModified'
    }

    def __init__(self, id=None, profile_name=None, display_name=None, conditions=None, user_id=None, type=None, sort_metric=None, sort_order=None, last_modified=None):  # noqa: E501
        """GetScreeningProfileDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._profile_name = None
        self._display_name = None
        self._conditions = None
        self._user_id = None
        self._type = None
        self._sort_metric = None
        self._sort_order = None
        self._last_modified = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if profile_name is not None:
            self.profile_name = profile_name
        if display_name is not None:
            self.display_name = display_name
        if conditions is not None:
            self.conditions = conditions
        if user_id is not None:
            self.user_id = user_id
        if type is not None:
            self.type = type
        if sort_metric is not None:
            self.sort_metric = sort_metric
        if sort_order is not None:
            self.sort_order = sort_order
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def id(self):
        """Gets the id of this GetScreeningProfileDto.  # noqa: E501


        :return: The id of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetScreeningProfileDto.


        :param id: The id of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def profile_name(self):
        """Gets the profile_name of this GetScreeningProfileDto.  # noqa: E501


        :return: The profile_name of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this GetScreeningProfileDto.


        :param profile_name: The profile_name of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def display_name(self):
        """Gets the display_name of this GetScreeningProfileDto.  # noqa: E501


        :return: The display_name of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetScreeningProfileDto.


        :param display_name: The display_name of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def conditions(self):
        """Gets the conditions of this GetScreeningProfileDto.  # noqa: E501


        :return: The conditions of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GetScreeningProfileDto.


        :param conditions: The conditions of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._conditions = conditions

    @property
    def user_id(self):
        """Gets the user_id of this GetScreeningProfileDto.  # noqa: E501


        :return: The user_id of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetScreeningProfileDto.


        :param user_id: The user_id of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def type(self):
        """Gets the type of this GetScreeningProfileDto.  # noqa: E501


        :return: The type of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetScreeningProfileDto.


        :param type: The type of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sort_metric(self):
        """Gets the sort_metric of this GetScreeningProfileDto.  # noqa: E501


        :return: The sort_metric of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._sort_metric

    @sort_metric.setter
    def sort_metric(self, sort_metric):
        """Sets the sort_metric of this GetScreeningProfileDto.


        :param sort_metric: The sort_metric of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._sort_metric = sort_metric

    @property
    def sort_order(self):
        """Gets the sort_order of this GetScreeningProfileDto.  # noqa: E501


        :return: The sort_order of this GetScreeningProfileDto.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this GetScreeningProfileDto.


        :param sort_order: The sort_order of this GetScreeningProfileDto.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def last_modified(self):
        """Gets the last_modified of this GetScreeningProfileDto.  # noqa: E501


        :return: The last_modified of this GetScreeningProfileDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this GetScreeningProfileDto.


        :param last_modified: The last_modified of this GetScreeningProfileDto.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetScreeningProfileDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetScreeningProfileDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
