# coding: utf-8

"""
    Investoreight Core API

    Investoreight API Documentation:  https://api.investoreight.com/api-docs/index.html  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@investoreight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetListMetricsMetadataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'metric_name': 'str',
        'display_name': 'str',
        'unit': 'str',
        'categories': 'list[str]',
        'data_format': 'str',
        'display_format': 'str',
        'type': 'str',
        'last_modified': 'int',
        'period_type_default': 'str',
        'aliases': 'str',
        'colorable': 'bool',
        'short_description': 'str',
        'soft_delete': 'bool',
        'screening_bounds': 'dict(str, list[float])',
        'screening_categories': 'list[ScreeningCategoryDto]'
    }

    attribute_map = {
        'id': 'Id',
        'metric_name': 'MetricName',
        'display_name': 'DisplayName',
        'unit': 'Unit',
        'categories': 'Categories',
        'data_format': 'DataFormat',
        'display_format': 'DisplayFormat',
        'type': 'Type',
        'last_modified': 'LastModified',
        'period_type_default': 'PeriodTypeDefault',
        'aliases': 'Aliases',
        'colorable': 'Colorable',
        'short_description': 'ShortDescription',
        'soft_delete': 'SoftDelete',
        'screening_bounds': 'ScreeningBounds',
        'screening_categories': 'ScreeningCategories'
    }

    def __init__(self, id=None, metric_name=None, display_name=None, unit=None, categories=None, data_format=None, display_format=None, type=None, last_modified=None, period_type_default=None, aliases=None, colorable=None, short_description=None, soft_delete=None, screening_bounds=None, screening_categories=None):  # noqa: E501
        """GetListMetricsMetadataDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._metric_name = None
        self._display_name = None
        self._unit = None
        self._categories = None
        self._data_format = None
        self._display_format = None
        self._type = None
        self._last_modified = None
        self._period_type_default = None
        self._aliases = None
        self._colorable = None
        self._short_description = None
        self._soft_delete = None
        self._screening_bounds = None
        self._screening_categories = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metric_name is not None:
            self.metric_name = metric_name
        if display_name is not None:
            self.display_name = display_name
        if unit is not None:
            self.unit = unit
        if categories is not None:
            self.categories = categories
        if data_format is not None:
            self.data_format = data_format
        if display_format is not None:
            self.display_format = display_format
        if type is not None:
            self.type = type
        if last_modified is not None:
            self.last_modified = last_modified
        if period_type_default is not None:
            self.period_type_default = period_type_default
        if aliases is not None:
            self.aliases = aliases
        if colorable is not None:
            self.colorable = colorable
        if short_description is not None:
            self.short_description = short_description
        if soft_delete is not None:
            self.soft_delete = soft_delete
        if screening_bounds is not None:
            self.screening_bounds = screening_bounds
        if screening_categories is not None:
            self.screening_categories = screening_categories

    @property
    def id(self):
        """Gets the id of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The id of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetListMetricsMetadataDto.


        :param id: The id of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metric_name(self):
        """Gets the metric_name of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The metric_name of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this GetListMetricsMetadataDto.


        :param metric_name: The metric_name of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._metric_name = metric_name

    @property
    def display_name(self):
        """Gets the display_name of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The display_name of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetListMetricsMetadataDto.


        :param display_name: The display_name of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def unit(self):
        """Gets the unit of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The unit of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this GetListMetricsMetadataDto.


        :param unit: The unit of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def categories(self):
        """Gets the categories of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The categories of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetListMetricsMetadataDto.


        :param categories: The categories of this GetListMetricsMetadataDto.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def data_format(self):
        """Gets the data_format of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The data_format of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this GetListMetricsMetadataDto.


        :param data_format: The data_format of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._data_format = data_format

    @property
    def display_format(self):
        """Gets the display_format of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The display_format of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._display_format

    @display_format.setter
    def display_format(self, display_format):
        """Sets the display_format of this GetListMetricsMetadataDto.


        :param display_format: The display_format of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._display_format = display_format

    @property
    def type(self):
        """Gets the type of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The type of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetListMetricsMetadataDto.


        :param type: The type of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def last_modified(self):
        """Gets the last_modified of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The last_modified of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this GetListMetricsMetadataDto.


        :param last_modified: The last_modified of this GetListMetricsMetadataDto.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def period_type_default(self):
        """Gets the period_type_default of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The period_type_default of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._period_type_default

    @period_type_default.setter
    def period_type_default(self, period_type_default):
        """Sets the period_type_default of this GetListMetricsMetadataDto.


        :param period_type_default: The period_type_default of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._period_type_default = period_type_default

    @property
    def aliases(self):
        """Gets the aliases of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The aliases of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this GetListMetricsMetadataDto.


        :param aliases: The aliases of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._aliases = aliases

    @property
    def colorable(self):
        """Gets the colorable of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The colorable of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: bool
        """
        return self._colorable

    @colorable.setter
    def colorable(self, colorable):
        """Sets the colorable of this GetListMetricsMetadataDto.


        :param colorable: The colorable of this GetListMetricsMetadataDto.  # noqa: E501
        :type: bool
        """

        self._colorable = colorable

    @property
    def short_description(self):
        """Gets the short_description of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The short_description of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this GetListMetricsMetadataDto.


        :param short_description: The short_description of this GetListMetricsMetadataDto.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def soft_delete(self):
        """Gets the soft_delete of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The soft_delete of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: bool
        """
        return self._soft_delete

    @soft_delete.setter
    def soft_delete(self, soft_delete):
        """Sets the soft_delete of this GetListMetricsMetadataDto.


        :param soft_delete: The soft_delete of this GetListMetricsMetadataDto.  # noqa: E501
        :type: bool
        """

        self._soft_delete = soft_delete

    @property
    def screening_bounds(self):
        """Gets the screening_bounds of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The screening_bounds of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: dict(str, list[float])
        """
        return self._screening_bounds

    @screening_bounds.setter
    def screening_bounds(self, screening_bounds):
        """Sets the screening_bounds of this GetListMetricsMetadataDto.


        :param screening_bounds: The screening_bounds of this GetListMetricsMetadataDto.  # noqa: E501
        :type: dict(str, list[float])
        """

        self._screening_bounds = screening_bounds

    @property
    def screening_categories(self):
        """Gets the screening_categories of this GetListMetricsMetadataDto.  # noqa: E501


        :return: The screening_categories of this GetListMetricsMetadataDto.  # noqa: E501
        :rtype: list[ScreeningCategoryDto]
        """
        return self._screening_categories

    @screening_categories.setter
    def screening_categories(self, screening_categories):
        """Sets the screening_categories of this GetListMetricsMetadataDto.


        :param screening_categories: The screening_categories of this GetListMetricsMetadataDto.  # noqa: E501
        :type: list[ScreeningCategoryDto]
        """

        self._screening_categories = screening_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetListMetricsMetadataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetListMetricsMetadataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
